{
    "i18n": false,
    "type": "tabs",
    "items": {
        "can_adapter": {
            "type": "panel",
            "label": "CAN Adapter",
            "items": {
                "adapter_ext_header": {
                    "type": "header",
                    "text": "External CAN Adapter",
                    "size": 2,
                    "newLine": false
                },
                "adapter_ext_name": {
                    "type": "text",
                    "label": "Adapter Name",
                    "tooltip": "Device mame of CAN adapter connected to external bus, e.g. can0",
                    "default" : "vcan0",
                    "newLine": false
                },
                "adapter_ext_activated": {
                    "type": "checkbox",
                    "label": "Connect to Adapter",
                    "tooltip": "Check, if this adapter shall be used.",
                    "default" : false,
                    "newLine": false
                },        
                "adapter_int_header": {
                    "type": "header",
                    "text": "Internal CAN Adapter",
                    "size": 2,
                    "newLine": true
                },
                "adapter_int_name": {
                    "type": "text",
                    "label": "Adapter Name",
                    "tooltip": "Device mame of CAN adapter connected to internal bus, e.g. can1",
                    "default" : "vcan1",
                    "newLine": false
                },
                "adapter_int_activated": {
                    "type": "checkbox",
                    "label": "Connect to Adapter",
                    "tooltip": "Check, if this adapter shall be used.",
                    "default" : false,
                    "newLine": false
                }        
            }
        },
        "can_adapter_ext": {
            "type": "panel",
            "label": "Assignments to External CAN Adapter",
            "items": {
                "e380_header": {
                    "type": "header",
                    "text": "Energy Meter E380",
                    "size": 2,
                    "newLine": true
                },
                "e380WarnUpdateTime": {
                    "type": "staticText",
                    "text": "WARNING: Values below 2 seconds may cause heavy system load!",
                    "newLine": true,
                    "hidden": "if (data.e380_delay < 2) { return false; }; return true;",
                    "style": {
                        "color": "red"
                    }
                },
                "e380_active": {
                    "type": "checkbox",
                    "label": "active",
                    "tooltip": "Activate communication",
                    "default" : false,
                    "newLine": true
                },
                "e380_name": {
                    "type": "text",
                    "label": "Name",
                    "tooltip": "This text will be used as base for object tree",
                    "default" : "e380",
                    "newLine": false
                },
                "e380_delay": {
                    "type": "number",
                    "label": "Min. update time (s)",
                    "tooltip": "Minumum update time for states. 0 for immediate update.",
                    "default" : 5,
                    "min": 0,
                    "newLine": false
                },
                "tableHdrCol": {
                    "type": "header",
                    "text": "Collecting Data on External CAN Adapter",
                    "size": 2
                },

                "introTableColExt": {
                    "type": "staticText",
                    "text": "Listen for data on addresses given in this table. No writing to CAN bus.",
                    "newLine": true
                },

                "tableColExtErrDevName": {
                    "type": "staticText",
                    "text": "ERROR: column 'Name of Device' must contain unique text",
                    "newLine": true,
                    "hidden": "const x={}; for(let ii=0; data.table_collect_ext && ii<data.table_collect_ext.length; ii++){const t=data.table_collect_ext[ii].collect_dev_name; if (x[t]==='x') return false; x[t]='x';}; return true;",
                    "style": {
                        "color": "red"
                    }
                },

                "tableColExtErrUniqueCanId": {
                    "type": "staticText",
                    "text": "ERROR: column 'CAN ID' must contain unique IDs",
                    "newLine": true,
                    "hidden": "const x={}; for(let ii=0; data.table_collect_ext && ii<data.table_collect_ext.length; ii++){const t=data.table_collect_ext[ii].collect_canid; if (x[t]==='x') return false; x[t]='x';}; return true;",
                    "style": {
                        "color": "red"
                    }
                },

                "tableColExtErrCanId": {
                    "type": "staticText",
                    "text": "ERROR: column 'CAN ID' must follow hex pattern e.g. '0x451'",
                    "newLine": true,
                    "hidden": "if (!data.table_collect_ext) return true; for (const c of data.table_collect_ext) {if ((String([c.collect_canid]) != String(c.collect_canid.match(/0[xX][0-9a-fA-F]+/)))) return false;}; return true;",
                    "style": {
                        "color": "red"
                    }
                },

                "table_collect_ext": {
                    "type": "table",
                    "newLine": true,
                    "sm": 12,
                    "md": 12,
                    "lg": 12,
                    "label": "",
                    "showSecondAddAt": 5,
                    "items": [
                        {
                            "type": "checkbox",
                            "attr": "collect_active",
                            "width": "5% ",
                            "title": "active",
                            "tooltip": "Activate communication",
                            "filter": false,
                            "sort": false,
                            "default": false
                        },
                        {
                            "type": "text",
                            "attr": "collect_dev_name",
                            "width": "15% ",
                            "title": "Name of Device",
                            "tooltip": "This text will be used as base for object tree",
                            "filter": false,
                            "sort": false,
                            "default": "vx3",
                            "validator": "const x={};for (const c of globalData.table_collect_ext) {if (x[c.collect_dev_name]==='x') return false; x[c.collect_dev_name]='x';}; return true;",
                            "validatorNoSaveOnError": true
                        },
                        {
                            "type": "number",
                            "attr": "collect_delay_time",
                            "width": "15% ",
                            "title": "Min. update time (s)",
                            "tooltip": "Minumum update time for states. 0 for immediate update.",
                            "filter": false,
                            "sort": false,
                            "min": 0,
                            "step": 1,
                            "default": 5
                        },
                        {
                            "type": "text",
                            "attr": "collect_canid",
                            "width": "10% ",
                            "title": "CAN ID",
                            "tooltip": "CAN ID to listen for data of this device.",
                            "filter": false,
                            "sort": false,
                            "default": "0x451",
                            "validator": "return data.collect_canid.match(/0[xX][0-9a-fA-F]+/);",
                            "validatorNoSaveOnError": true
                        }
                    ]
                },
                "tableHdrUds": {
                    "type": "header",
                    "text": "Requesting and Writing Data on External CAN Adapter via UDSonCAN",
                    "size": 2
                },

                "introTableUds": {
                    "type": "staticText",
                    "text": "Actively request wead- and write-operations to specified data identifiers",
                    "newLine": true
                },
                "table_uds": {
                    "type": "table",
                    "newLine": true,
                    "sm": 12,
                    "md": 12,
                    "lg": 12,
                    "label": "",
                    "showSecondAddAt": 5,
                    "items": [
                        {
                            "type": "checkbox",
                            "attr": "uds_active",
                            "width": "5% ",
                            "title": "active",
                            "tooltip": "Activate communication",
                            "filter": false,
                            "sort": false,
                            "default": false
                        },
                        {
                            "type": "number",
                            "attr": "uds_schedule",
                            "width": "10% ",
                            "title": "Schedule (s)",
                            "tooltip": "Schedule for requesting given DIDs",
                            "filter": false,
                            "sort": false,
                            "min": 0,
                            "step": 1,
                            "default": 15
                        },
                        {   "type": "selectSendTo",
                            "title": "Select device",
                            "command": "getDeviceSelectSendTo",
                            "attr": "uds_select_dev",
                            "jsonData": "{${JSON.stringify(data.uds_select_dev)}}",
                            "width": "15%",
                            "default": "Select device",
                            "alsoDependsOn": ["uds_schedule"],
                            "newLine": false
                        },
                        {
                            "type": "text",
                            "attr": "uds_dids",
                            "width": "30% ",
                            "title": "List of DIDs",
                            "tooltip": "Separate by comma! All given DIDs will be requested with specified schedule an ECU address.",
                            "filter": false,
                            "sort": false,
                            "default": "256"
                        }
                    ]
                }
            }
        },
        "can_adapter_int": {
            "type": "panel",
            "label": "Assignments to Internal CAN Adapter",
            "items": {
                "tableHdr": {
                    "type": "header",
                    "text": "Collecting Data on Internal CAN Adapter",
                    "size": 2
                },

                "introTableColInt": {
                    "type": "staticText",
                    "text": "Listen for data on addresses given in this table. No writing to CAN bus.",
                    "newLine": true
                },

                "tableColIntErrDevName": {
                    "type": "staticText",
                    "text": "ERROR: column 'Name of Device' must contain unique text",
                    "newLine": true,
                    "hidden": "const x={}; for(let ii=0; data.table_collect_int && ii<data.table_collect_int.length; ii++){const t=data.table_collect_int[ii].collect_dev_name; if (x[t]==='x') return false; x[t]='x';}; return true;",
                    "style": {
                        "color": "red"
                    }
                },

                "tableColIntErrUniqueCanId": {
                    "type": "staticText",
                    "text": "ERROR: column 'CAN ID' must contain unique IDs",
                    "newLine": true,
                    "hidden": "const x={}; for(let ii=0; data.table_collect_int && ii<data.table_collect_int.length; ii++){const t=data.table_collect_int[ii].collect_canid; if (x[t]==='x') return false; x[t]='x';}; return true;",
                    "style": {
                        "color": "red"
                    }
                },

                "tableColIntErrCanId": {
                    "type": "staticText",
                    "text": "ERROR: column 'CAN ID' must follow hex pattern e.g. '0x451'",
                    "newLine": true,
                    "hidden": "if (!data.table_collect_int) return true; for (const c of data.table_collect_int) {if ((String([c.collect_canid]) != String(c.collect_canid.match(/0[xX][0-9a-fA-F]+/)))) return false;}; return true;",
                    "style": {
                        "color": "red"
                    }
                },

                "table_collect_int": {
                    "type": "table",
                    "newLine": true,
                    "sm": 12,
                    "md": 12,
                    "lg": 12,
                    "label": "",
                    "showSecondAddAt": 5,
                    "items": [
                        {
                            "type": "checkbox",
                            "attr": "collect_active",
                            "width": "5% ",
                            "title": "active",
                            "tooltip": "Activate communication",
                            "filter": false,
                            "sort": false,
                            "default": false
                        },
                        {
                            "type": "text",
                            "attr": "collect_dev_name",
                            "width": "15% ",
                            "title": "Name of Device",
                            "tooltip": "This text will be used as base for object tree",
                            "filter": false,
                            "sort": false,
                            "default": "vitocal",
                            "validator": "const x={};for (const c of globalData.table_collect_int) {if (x[c.collect_dev_name]==='x') return false; x[c.collect_dev_name]='x';}; return true;",
                            "validatorNoSaveOnError": true
                        },
                        {
                            "type": "number",
                            "attr": "collect_delay_time",
                            "width": "15% ",
                            "title": "Min. update time (s)",
                            "tooltip": "Minumum update time for states. 0 for immediate update.",
                            "filter": false,
                            "sort": false,
                            "min": 0,
                            "step": 1,
                            "default": 5
                        },
                        {
                            "type": "text",
                            "attr": "collect_canid",
                            "width": "10% ",
                            "title": "CAN ID",
                            "tooltip": "CAN ID to listen for data of this device.",
                            "filter": false,
                            "sort": false,
                            "default": "0x693",
                            "validator": "return data.collect_canid.match(/0[xX][0-9a-fA-F]+/);",
                            "validatorNoSaveOnError": true
                        }
                    ]
                }
            }
        }
    }
}